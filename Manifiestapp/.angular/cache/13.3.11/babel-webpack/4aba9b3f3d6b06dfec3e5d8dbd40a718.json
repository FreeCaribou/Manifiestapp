{"ast":null,"code":"import { Directive, EventEmitter, Input, KeyValueDiffers, NgZone, Output } from '@angular/core';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../../core/leaflet.directive';\nvar LeafletLayersControlDirective = /** @class */function () {\n  function LeafletLayersControlDirective(leafletDirective, differs, zone) {\n    this.differs = differs;\n    this.zone = zone;\n    this.layersControlReady = new EventEmitter();\n    this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    this.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n    // Generate differs\n    this.baseLayersDiffer = this.differs.find({}).create();\n    this.overlaysDiffer = this.differs.find({}).create();\n  }\n  Object.defineProperty(LeafletLayersControlDirective.prototype, \"layersControlConfig\", {\n    get: function () {\n      return this.layersControlConfigValue;\n    },\n    set: function (v) {\n      // Validation/init stuff\n      if (null == v) {\n        v = new LeafletControlLayersConfig();\n      }\n      if (null == v.baseLayers) {\n        v.baseLayers = {};\n      }\n      if (null == v.overlays) {\n        v.overlays = {};\n      }\n      // Store the value\n      this.layersControlConfigValue = v;\n      // Update the map\n      this.updateLayers();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LeafletLayersControlDirective.prototype.ngOnInit = function () {\n    var _this = this;\n    // Init the map\n    this.leafletDirective.init();\n    // Set up control outside of angular to avoid change detection when using the control\n    this.zone.runOutsideAngular(function () {\n      // Set up all the initial settings\n      _this.controlLayers.init({}, _this.layersControlOptions).addTo(_this.leafletDirective.getMap());\n    });\n    this.updateLayers();\n  };\n  LeafletLayersControlDirective.prototype.ngOnDestroy = function () {\n    this.layersControlConfig = {\n      baseLayers: {},\n      overlays: {}\n    };\n    this.controlLayers.getLayersControl().remove();\n  };\n  LeafletLayersControlDirective.prototype.ngDoCheck = function () {\n    this.updateLayers();\n  };\n  LeafletLayersControlDirective.prototype.updateLayers = function () {\n    var map = this.leafletDirective.getMap();\n    var layersControl = this.controlLayers.getLayersControl();\n    if (null != map && null != layersControl) {\n      // Run the baselayers differ\n      if (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n        var changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n        this.controlLayers.applyBaseLayerChanges(changes);\n      }\n      // Run the overlays differ\n      if (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n        var changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n        this.controlLayers.applyOverlayChanges(changes);\n      }\n    }\n  };\n  LeafletLayersControlDirective.ctorParameters = function () {\n    return [{\n      type: LeafletDirective\n    }, {\n      type: KeyValueDiffers\n    }, {\n      type: NgZone\n    }];\n  };\n  LeafletLayersControlDirective.propDecorators = {\n    layersControlConfig: [{\n      type: Input,\n      args: ['leafletLayersControl']\n    }],\n    layersControlOptions: [{\n      type: Input,\n      args: ['leafletLayersControlOptions']\n    }],\n    layersControlReady: [{\n      type: Output,\n      args: ['leafletLayersControlReady']\n    }]\n  };\n  LeafletLayersControlDirective.ɵfac = function LeafletLayersControlDirective_Factory(t) {\n    return new (t || LeafletLayersControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LeafletDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n  LeafletLayersControlDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: LeafletLayersControlDirective,\n    selectors: [[\"\", \"leafletLayersControl\", \"\"]],\n    inputs: {\n      layersControlConfig: [\"leafletLayersControl\", \"layersControlConfig\"],\n      layersControlOptions: [\"leafletLayersControlOptions\", \"layersControlOptions\"]\n    },\n    outputs: {\n      layersControlReady: \"leafletLayersControlReady\"\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return LeafletLayersControlDirective;\n}();\nexport { LeafletLayersControlDirective };\n\n//# sourceMappingURL=leaflet-control-layers.directive.js.map","map":null,"metadata":{},"sourceType":"module"}