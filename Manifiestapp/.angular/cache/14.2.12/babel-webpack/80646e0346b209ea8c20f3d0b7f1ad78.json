{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';\nimport * as i0 from \"@angular/core\";\n\nvar OpenNativeSettings =\n/** @class */\nfunction (_super) {\n  __extends(OpenNativeSettings, _super);\n\n  function OpenNativeSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  OpenNativeSettings.prototype.open = function (setting) {\n    return cordova(this, \"open\", {}, arguments);\n  };\n\n  OpenNativeSettings.ɵfac = /* @__PURE__ */function () {\n    let ɵOpenNativeSettings_BaseFactory;\n    return function OpenNativeSettings_Factory(t) {\n      return (ɵOpenNativeSettings_BaseFactory || (ɵOpenNativeSettings_BaseFactory = i0.ɵɵgetInheritedFactory(OpenNativeSettings)))(t || OpenNativeSettings);\n    };\n  }();\n\n  OpenNativeSettings.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OpenNativeSettings,\n    factory: OpenNativeSettings.ɵfac\n  });\n  OpenNativeSettings.pluginName = \"OpenNativeSettings\";\n  OpenNativeSettings.plugin = \"cordova-open-native-settings\";\n  OpenNativeSettings.pluginRef = \"cordova.plugins.settings\";\n  OpenNativeSettings.repo = \"https://github.com/guyromb/Cordova-open-native-settings\";\n  OpenNativeSettings.platforms = [\"Android\", \"iOS\"];\n  OpenNativeSettings = __decorate([], OpenNativeSettings);\n  return OpenNativeSettings;\n}(AwesomeCordovaNativePlugin);\n\nexport { OpenNativeSettings };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvb3Blbi1uYXRpdmUtc2V0dGluZ3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7OztJQW1HcEQsc0NBQTBCOzs7O0lBUWhFLGlDQUFJLGFBQUMsT0FBbUM7b0hBUjdCLGtCQUFrQjt3SEFBbEIsa0JBQWtCOzs7Ozs7SUFBbEIsa0JBQWtCLGtCQUFsQixrQkFBa0I7NkJBcEcvQjtFQW9Hd0MsMEJBQTBCO1NBQXJELGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUQ5QixVQUFVOzhCQVNULElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIE9wZW4gTmF0aXZlIFNldHRpbmdzXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBsdWdpbiB0byBvcGVuIG5hdGl2ZSBzY3JlZW5zIG9mIGlPUy9hbmRyb2lkIHNldHRpbmdzXG4gKiBAdXNhZ2VcbiAqIFlvdSBjYW4gb3BlbiBhbnkgb2YgdGhlc2Ugc2V0dGluZ3M6XG4gKiBgYGBcbiAqICBcImFib3V0XCIsIC8vIGlvc1xuICogIFwiYWNjZXNzaWJpbGl0eVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImFjY291bnRcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJhaXJwbGFuZV9tb2RlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogIFwiYXBuXCIsIC8vIGFuZHJvaWRcbiAqICBcImFwcGxpY2F0aW9uX2RldGFpbHNcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJhcHBsaWNhdGlvbl9kZXZlbG9wbWVudFwiLCAvLyBhbmRyb2lkXG4gKiAgXCJhcHBsaWNhdGlvblwiLCAvLyBhbmRyb2lkXG4gKiAgXCJhdXRvbG9ja1wiLCAvLyBpb3NcbiAqICBcImJhdHRlcnlfb3B0aW1pemF0aW9uXCIsIC8vIGFuZHJvaWRcbiAqICBcImJsdWV0b290aFwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImNhc3RsZVwiLCAvLyBpb3NcbiAqICBcImNhcHRpb25pbmdcIiwgLy8gYW5kcm9pZFxuICogIFwiY2FzdFwiLCAvLyBhbmRyb2lkXG4gKiAgXCJjZWxsdWxhcl91c2FnZVwiLCAvLyBpb3NcbiAqICBcImNvbmZpZ3VyYXRpb25fbGlzdFwiLCAvLyBpb3NcbiAqICBcImRhdGFfcm9hbWluZ1wiLCAvLyBhbmRyb2lkXG4gKiAgXCJkYXRlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogIFwiZGlzcGxheVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImRyZWFtXCIsIC8vIGFuZHJvaWRcbiAqICBcImZhY2V0aW1lXCIsIC8vIGlvc1xuICogIFwiaG9tZVwiLCAvLyBhbmRyb2lkXG4gKiAgXCJrZXlib2FyZFwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImtleWJvYXJkX3N1YnR5cGVcIiwgLy8gYW5kcm9pZFxuICogIFwibG9jYWxlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJsb2NhdGlvblwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwibG9jYXRpb25zXCIsIC8vIGlvc1xuICogXCJtYW5hZ2VfYWxsX2FwcGxpY2F0aW9uc1wiLCAvLyBhbmRyb2lkXG4gKiBcIm1hbmFnZV9hcHBsaWNhdGlvbnNcIiwgLy8gYW5kcm9pZFxuICogXCJtZW1vcnlfY2FyZFwiLCAvLyBhbmRyb2lkXG4gKiBcIm11c2ljXCIsIC8vIGlvc1xuICogXCJtdXNpY19lcXVhbGl6ZXJcIiwgLy8gaW9zXG4gKiBcIm11c2ljX3ZvbHVtZVwiLCAvLyBpb3NcbiAqIFwibmV0d29ya1wiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwibmlrZV9pcG9kXCIsIC8vIGlvc1xuICogXCJuZmNzaGFyaW5nXCIsIC8vIGFuZHJvaWRcbiAqIFwibmZjX3BheW1lbnRcIiwgLy8gYW5kcm9pZFxuICogXCJuZmNfc2V0dGluZ3NcIiwgLy8gYW5kcm9pZFxuICogXCJub3Rlc1wiLCAvLyBpb3NcbiAqIFwibm90aWZpY2F0aW9uX2lkXCIsIC8vIGlvc1xuICogXCJwYXNzYm9va1wiLCAvLyBpb3NcbiAqIFwicGhvbmVcIiwgLy8gaW9zXG4gKiBcInBob3Rvc1wiLCAvLyBpb3NcbiAqIFwicHJpbnRcIiwgLy8gYW5kcm9pZFxuICogXCJwcml2YWN5XCIsIC8vIGFuZHJvaWRcbiAqIFwicXVpY2tfbGF1bmNoXCIsIC8vIGFuZHJvaWRcbiAqIFwicmVzZXRcIiwgLy8gaW9zXG4gKiBcInJpbmd0b25lXCIsIC8vIGlvc1xuICogXCJicm93c2VyXCIsIC8vIGlvc1xuICogXCJzZWFyY2hcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInNlY3VyaXR5XCIsIC8vIGFuZHJvaWRcbiAqIFwic2V0dGluZ3NcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInNob3dfcmVndWxhdG9yeV9pbmZvXCIsXG4gKiBcInNvdW5kXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJzb2Z0d2FyZV91cGRhdGVcIiwgLy8gaW9zXG4gKiBcInN0b3JhZ2VcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInN0b3JlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJzeW5jXCIsIC8vIGFuZHJvaWRcbiAqIFwidGV0aGVyaW5nXCIsIC8vIGlvc1xuICogXCJ0d2l0dGVyXCIsIC8vIGlvc1xuICogXCJ0b3VjaFwiLCAvLyBpb3NcbiAqIFwidXNhZ2VcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInVzZXJfZGljdGlvbmFyeVwiLCAvLyBhbmRyb2lkXG4gKiBcInZpZGVvXCIsIC8vIGlvc1xuICogXCJ2b2ljZV9pbnB1dFwiLCAvLyBhbmRyb2lkXG4gKiBcInZwblwiLCAvLyBpb3NcbiAqIFwid2FsbHBhcGVyXCIsIC8vIGlvc1xuICogXCJ3aWZpX2lwXCIsIC8vIGFuZHJvaWRcbiAqIFwid2lmaVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwid2lyZWxlc3NcIiAvLyBhbmRyb2lkXG4gKiAgYGBgXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBPcGVuTmF0aXZlU2V0dGluZ3MgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvb3Blbi1uYXRpdmUtc2V0dGluZ3Mvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBvcGVuTmF0aXZlU2V0dGluZ3M6IE9wZW5OYXRpdmVTZXR0aW5ncykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ09wZW5OYXRpdmVTZXR0aW5ncycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtb3Blbi1uYXRpdmUtc2V0dGluZ3MnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc2V0dGluZ3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2d1eXJvbWIvQ29yZG92YS1vcGVuLW5hdGl2ZS1zZXR0aW5ncycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPcGVuTmF0aXZlU2V0dGluZ3MgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBPcGVucyBhIHNldHRpbmcgZGlhbG9nXG4gICAqXG4gICAqIEBwYXJhbSBzZXR0aW5nIHtzdHJpbmd8YXJyYXl9IHNldHRpbmcgbmFtZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBvcGVuKHNldHRpbmc6IHN0cmluZyB8IFtzdHJpbmcsIGJvb2xlYW5dKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==","map":null,"metadata":{},"sourceType":"module"}