{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport { LocalStorageEnum } from \"src/app/shared/models/LocalStorage.enum\";\nimport { of } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../base.service\";\nimport * as i2 from \"../../communication/language.communication.service\";\nimport * as i3 from \"../volunteer-shift/volunteer-shift.service\";\nexport let SellingService = /*#__PURE__*/(() => {\n  class SellingService {\n    constructor(baseService, languageService, volunteerShiftService) {\n      this.baseService = baseService;\n      this.languageService = languageService;\n      this.volunteerShiftService = volunteerShiftService;\n      this.baseUrl = `${environment.apiUrl}`;\n      this.departmentsCache = [];\n    }\n\n    getAllDepartments() {\n      return this.baseService.getCall(`${this.baseUrl}departments/${this.languageService.selectedLanguage}`).pipe(map(d => {\n        return d.sort((a, b) => {});\n      }), tap(d => {\n        this.departmentsCache = d;\n      }));\n    }\n\n    getAllProvinceInfo() {\n      return this.baseService.getCall(`${this.baseUrl}departments/info/province`);\n    }\n\n    getAllTicketTypes() {\n      let shop = localStorage.getItem(LocalStorageEnum.SellerDepartment) || 'app';\n      return this.baseService.getCall(`${this.baseUrl}tickets/types/${shop.toLowerCase()}`);\n    }\n\n    connectSeller(body) {\n      return this.baseService.postCall(`${this.baseUrl}sellers/connect`, body);\n    } // TODO check later to have more information\n\n\n    verifySellerConnection() {\n      const sellerId = localStorage.getItem(LocalStorageEnum.BeepleId);\n\n      if (sellerId && this.volunteerShiftService.isReadyToSellWithData()) {\n        return of({\n          id: localStorage.getItem(LocalStorageEnum.BeepleId),\n          sellTickets: 2,\n          sellTicketsGoal: 10\n        });\n      } else {\n        return of(null);\n      }\n    }\n\n    ticketsPrepar(tickets, email, firstname, lastname, clientTransactionId) {\n      return this.baseService.postCall(`${this.baseUrl}tickets/prepar`, {\n        firstname,\n        lastname,\n        email,\n        language: this.languageService.selectedLanguage,\n        ip: \"127.0.0.1\",\n        agent: \"ManifiestApp\",\n        invoice: 0,\n        testmode: 0,\n        sellerId: localStorage.getItem(LocalStorageEnum.SellerEmail),\n        sellerName: localStorage.getItem(LocalStorageEnum.SellerName),\n        tickets,\n        sellerDepartmentId: localStorage.getItem(LocalStorageEnum.SellerDepartment),\n        sellerPostalCode: localStorage.getItem(LocalStorageEnum.SellerPostalCode),\n        clientTransactionId,\n        fromWorkGroup: localStorage.getItem(LocalStorageEnum.SellerFromWorkGroup) ? true : false\n      });\n    }\n\n    ticketsSale(tickets, email, firstname, lastname, transactionId, askSendTicket, clientTransactionId, address) {\n      return this.baseService.postCall(`${this.baseUrl}tickets/confirm`, {\n        firstname,\n        lastname,\n        email,\n        language: this.languageService.selectedLanguage,\n        ip: \"127.0.0.1\",\n        agent: \"ManifiestApp\",\n        invoice: 0,\n        testmode: 0,\n        sellerId: localStorage.getItem(LocalStorageEnum.SellerEmail),\n        sellerName: localStorage.getItem(LocalStorageEnum.SellerName),\n        tickets,\n        vwTransactionId: transactionId,\n        sellerDepartmentId: localStorage.getItem(LocalStorageEnum.SellerDepartment),\n        sellerPostalCode: localStorage.getItem(LocalStorageEnum.SellerPostalCode),\n        askSendTicket,\n        address,\n        clientTransactionId,\n        fromWorkGroup: localStorage.getItem(LocalStorageEnum.SellerFromWorkGroup) ? true : false\n      });\n    }\n\n    newsletterAdd(email, firstname, lastname) {\n      return this.baseService.postCall(`${this.baseUrl}tickets/newsletter-add`, {\n        firstname,\n        lastname,\n        email,\n        'MMERGE6': this.languageService.selectedLanguage\n      });\n    }\n\n    getMySellingInformation() {\n      return this.baseService.getCall(`${this.baseUrl}tickets/sellingInformation/seller/${localStorage.getItem(LocalStorageEnum.SellerEmail)}`);\n    }\n\n    getMyCurrentDepartmentSellingInformation() {\n      return this.baseService.getCall(`${this.baseUrl}tickets/sellingInformation/department/top-ten/${localStorage.getItem(LocalStorageEnum.SellerDepartment)}/${localStorage.getItem(LocalStorageEnum.SellerPostalCode)}`);\n    }\n\n    getAllSellingInformation() {\n      return this.baseService.getCall(`${this.baseUrl}tickets/sellingInformation/seller/top-ten`);\n    }\n\n    getMyCurrentPostCodeSellingInformation() {\n      const postCode = localStorage.getItem(LocalStorageEnum.SellerPostalCode);\n      const sellerDepartement = localStorage.getItem(LocalStorageEnum.SellerDepartment);\n      const fromWorkGroup = localStorage.getItem(LocalStorageEnum.SellerFromWorkGroup);\n      return this.baseService.getCall(`${this.baseUrl}tickets/sellingInformation/postCode/${postCode}/${sellerDepartement}/${fromWorkGroup}`);\n    }\n\n    getSellerQrCode(paymentOrder, forApp = false) {\n      return this.baseService.postCall(`${this.baseUrl}tickets/seller/qrcode${forApp ? '/app' : ''}`, paymentOrder);\n    }\n\n  }\n\n  SellingService.ɵfac = function SellingService_Factory(t) {\n    return new (t || SellingService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.LanguageCommunicationService), i0.ɵɵinject(i3.VolunteerShiftService));\n  };\n\n  SellingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SellingService,\n    factory: SellingService.ɵfac,\n    providedIn: 'root'\n  });\n  return SellingService;\n})();","map":null,"metadata":{},"sourceType":"module"}