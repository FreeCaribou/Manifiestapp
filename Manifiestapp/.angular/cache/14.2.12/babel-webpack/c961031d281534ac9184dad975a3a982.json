{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { LocalStorageEnum } from 'src/app/shared/models/LocalStorage.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./info-list.data.service\";\nimport * as i2 from \"../../communication/language.communication.service\";\nexport let InfoListService = /*#__PURE__*/(() => {\n  class InfoListService {\n    constructor(service, languageService) {\n      this.service = service;\n      this.languageService = languageService;\n      this.languageService.langHasChangeEvent.subscribe(e => {\n        this.resetInfoListCache();\n      });\n    }\n\n    getVenues() {\n      if (!this.venues || this.venues.length === 0) {\n        return this.service.getVenues().pipe(tap(v => this.venues = v));\n      } else {\n        return of(this.venues);\n      }\n    }\n\n    getOrganizers() {\n      if (!this.organizers || this.organizers.length === 0) {\n        return this.service.getOrganizers().pipe(tap(o => this.organizers = o));\n      } else {\n        return of(this.organizers);\n      }\n    }\n\n    getEventCategories() {\n      if (!this.eventCategories || this.eventCategories.length === 0) {\n        return this.service.getEventCategories().pipe(tap(c => this.eventCategories = c));\n      } else {\n        return of(this.eventCategories);\n      }\n    }\n\n    getDays() {\n      if (!this.days || this.days.length === 0) {\n        return this.service.getDays().pipe(tap(d => this.days = d), tap(d => localStorage.setItem(LocalStorageEnum.OfflineDays, JSON.stringify(d))));\n      } else {\n        return of(this.days);\n      }\n    }\n\n    getScheduleUpdate() {\n      return this.service.getScheduleUpdate();\n    }\n\n    resetInfoListCache() {\n      this.venues = [];\n      this.organizers = [];\n      this.eventCategories = [];\n      this.days = [];\n    } // offline\n\n\n    getOfflineDaysList() {\n      const tmp = localStorage.getItem(LocalStorageEnum.OfflineDays);\n\n      if (tmp) {\n        try {\n          return JSON.parse(localStorage.getItem(LocalStorageEnum.OfflineDays));\n        } catch (e) {\n          return [];\n        }\n      } else {\n        return [];\n      }\n    }\n\n  }\n\n  InfoListService.ɵfac = function InfoListService_Factory(t) {\n    return new (t || InfoListService)(i0.ɵɵinject(i1.InfoListDataService), i0.ɵɵinject(i2.LanguageCommunicationService));\n  };\n\n  InfoListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InfoListService,\n    factory: InfoListService.ɵfac,\n    providedIn: 'root'\n  });\n  return InfoListService;\n})();","map":null,"metadata":{},"sourceType":"module"}