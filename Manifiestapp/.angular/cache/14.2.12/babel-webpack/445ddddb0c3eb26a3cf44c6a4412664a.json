{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../communication/language.communication.service\";\nimport * as i3 from \"../base.service\";\nexport let ProgrammeDataService = /*#__PURE__*/(() => {\n  class ProgrammeDataService {\n    constructor(httpClient, languageService, baseService) {\n      this.httpClient = httpClient;\n      this.languageService = languageService;\n      this.baseService = baseService;\n      this.baseUrl = `${environment.baseUrl}evenement`;\n      this.embed = 'wp:attachment,wp:term,wp:featuredmedia';\n    }\n    getAllProgramme() {\n      return this.httpClient.get(`${this.baseUrl}`);\n    }\n    getAllProgrammeFilter(day, locatiesId, categoriesId, organizersId) {\n      let params = new HttpParams();\n      params = params.append('_embed', this.embed);\n      if ((day === null || day === void 0 ? void 0 : day.length) > 0) {\n        params = params.append('dag', day.toString());\n      }\n      if ((locatiesId === null || locatiesId === void 0 ? void 0 : locatiesId.length) > 0) {\n        params = params.append('locatie', locatiesId.toString());\n      }\n      if ((organizersId === null || organizersId === void 0 ? void 0 : organizersId.length) > 0) {\n        params = params.append('organizer', organizersId.toString());\n      }\n      if ((categoriesId === null || categoriesId === void 0 ? void 0 : categoriesId.length) > 0) {\n        params = params.append('programmacategorie', categoriesId.toString());\n      }\n      return this.fetchWordPressListPage(`${this.baseUrl}?${params.toString()}&lang=${this.languageService.selectedLanguage}`, 1, []);\n    }\n    getFavoriteProgramme(ids) {\n      return this.fetchWordPressListPage(`${this.baseUrl}?include=${ids === null || ids === void 0 ? void 0 : ids.toString()}&_embed=${this.embed}&lang=${this.languageService.selectedLanguage}`, 1, []);\n    }\n    getEvent(id) {\n      return this.baseService.get(`${this.baseUrl}/${id}?_embed=${this.embed}&lang=${this.languageService.selectedLanguage}`);\n    }\n    // WordPress can return max 100 items per call\n    // More and we have a fail result\n    // But we have the attributes page to parcours the page\n    // Here we parcours in a recursive method the page\n    // If the result is not an array, is that we are at the end and we return the lastArray\n    // If the length of the result is lesser than the maxPerPage, is that we are also at the end so we return a merge of the lastArray and the respons\n    fetchWordPressListPage(url, count = 1, lastArray = [], maxPerPage = 100) {\n      let arrayToReturn = lastArray;\n      return this.baseService.get(`${url}&per_page=${maxPerPage}&page=${count}`).pipe(switchMap(e => {\n        if (!Array.isArray(e)) {\n          return of(lastArray);\n        }\n        arrayToReturn = arrayToReturn.concat(e);\n        if (e.length === maxPerPage) {\n          return this.fetchWordPressListPage(url, count + 1, arrayToReturn);\n        } else {\n          return of(arrayToReturn);\n        }\n      }));\n    }\n  }\n  ProgrammeDataService.ɵfac = function ProgrammeDataService_Factory(t) {\n    return new (t || ProgrammeDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LanguageCommunicationService), i0.ɵɵinject(i3.BaseService));\n  };\n  ProgrammeDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProgrammeDataService,\n    factory: ProgrammeDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProgrammeDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}