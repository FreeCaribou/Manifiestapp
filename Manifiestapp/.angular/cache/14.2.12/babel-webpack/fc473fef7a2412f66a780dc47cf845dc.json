{"ast":null,"code":"import _asyncToGenerator from \"C:/Main/Document/Code/Manifiestapp/Manifiestapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nexport class DeviceWeb extends WebPlugin {\n  getId() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return {\n        uuid: _this.getUid()\n      };\n    })();\n  }\n  getInfo() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.userAgent) {\n        throw _this2.unavailable('Device API not available in this browser');\n      }\n      const ua = navigator.userAgent;\n      const uaFields = _this2.parseUa(ua);\n      return {\n        model: uaFields.model,\n        platform: 'web',\n        operatingSystem: uaFields.operatingSystem,\n        osVersion: uaFields.osVersion,\n        manufacturer: navigator.vendor,\n        isVirtual: false,\n        webViewVersion: uaFields.browserVersion\n      };\n    })();\n  }\n  getBatteryInfo() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.getBattery) {\n        throw _this3.unavailable('Device API not available in this browser');\n      }\n      let battery = {};\n      try {\n        battery = yield navigator.getBattery();\n      } catch (e) {\n        // Let it fail, we don't care\n      }\n      return {\n        batteryLevel: battery.level,\n        isCharging: battery.charging\n      };\n    })();\n  }\n  getLanguageCode() {\n    return _asyncToGenerator(function* () {\n      return {\n        value: navigator.language\n      };\n    })();\n  }\n  parseUa(ua) {\n    const uaFields = {};\n    const start = ua.indexOf('(') + 1;\n    let end = ua.indexOf(') AppleWebKit');\n    if (ua.indexOf(') Gecko') !== -1) {\n      end = ua.indexOf(') Gecko');\n    }\n    const fields = ua.substring(start, end);\n    if (ua.indexOf('Android') !== -1) {\n      const tmpFields = fields.replace('; wv', '').split('; ').pop();\n      if (tmpFields) {\n        uaFields.model = tmpFields.split(' Build')[0];\n      }\n      uaFields.osVersion = fields.split('; ')[1];\n    } else {\n      uaFields.model = fields.split('; ')[0];\n      if (typeof navigator !== 'undefined' && navigator.oscpu) {\n        uaFields.osVersion = navigator.oscpu;\n      } else {\n        if (ua.indexOf('Windows') !== -1) {\n          uaFields.osVersion = fields;\n        } else {\n          const tmpFields = fields.split('; ').pop();\n          if (tmpFields) {\n            const lastParts = tmpFields.replace(' like Mac OS X', '').split(' ');\n            uaFields.osVersion = lastParts[lastParts.length - 1].replace(/_/g, '.');\n          }\n        }\n      }\n    }\n    if (/android/i.test(ua)) {\n      uaFields.operatingSystem = 'android';\n    } else if (/iPad|iPhone|iPod/.test(ua) && !window.MSStream) {\n      uaFields.operatingSystem = 'ios';\n    } else if (/Win/.test(ua)) {\n      uaFields.operatingSystem = 'windows';\n    } else if (/Mac/i.test(ua)) {\n      uaFields.operatingSystem = 'mac';\n    } else {\n      uaFields.operatingSystem = 'unknown';\n    }\n    // Check for browsers based on non-standard javascript apis, only not user agent\n    const isFirefox = !!window.InstallTrigger;\n    const isSafari = !!window.ApplePaySession;\n    const isChrome = !!window.chrome;\n    const isEdge = /Edg/.test(ua);\n    const isFirefoxIOS = /FxiOS/.test(ua);\n    const isChromeIOS = /CriOS/.test(ua);\n    const isEdgeIOS = /EdgiOS/.test(ua);\n    // FF and Edge User Agents both end with \"/MAJOR.MINOR\"\n    if (isSafari || isChrome && !isEdge || isFirefoxIOS || isChromeIOS || isEdgeIOS) {\n      // Safari version comes as     \"... Version/MAJOR.MINOR ...\"\n      // Chrome version comes as     \"... Chrome/MAJOR.MINOR ...\"\n      // FirefoxIOS version comes as \"... FxiOS/MAJOR.MINOR ...\"\n      // ChromeIOS version comes as  \"... CriOS/MAJOR.MINOR ...\"\n      let searchWord;\n      if (isFirefoxIOS) {\n        searchWord = 'FxiOS';\n      } else if (isChromeIOS) {\n        searchWord = 'CriOS';\n      } else if (isEdgeIOS) {\n        searchWord = 'EdgiOS';\n      } else if (isSafari) {\n        searchWord = 'Version';\n      } else {\n        searchWord = 'Chrome';\n      }\n      const words = ua.split(' ');\n      for (const word of words) {\n        if (word.includes(searchWord)) {\n          const version = word.split('/')[1];\n          uaFields.browserVersion = version;\n        }\n      }\n    } else if (isFirefox || isEdge) {\n      const reverseUA = ua.split('').reverse().join('');\n      const reverseVersion = reverseUA.split('/')[0];\n      const version = reverseVersion.split('').reverse().join('');\n      uaFields.browserVersion = version;\n    }\n    return uaFields;\n  }\n  getUid() {\n    if (typeof window !== 'undefined') {\n      let uid = window.localStorage.getItem('_capuid');\n      if (uid) {\n        return uid;\n      }\n      uid = this.uuid4();\n      window.localStorage.setItem('_capuid', uid);\n      return uid;\n    }\n    return this.uuid4();\n  }\n  uuid4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n}\n//# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module"}