{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { forkJoin, of } from \"rxjs\";\nimport { map, switchMap, tap } from \"rxjs/operators\";\nimport { LocalStorageEnum } from \"src/app/shared/models/LocalStorage.enum\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../base.service\";\nimport * as i3 from \"../../communication/language.communication.service\"; // TODO-refactor typing\n\nexport let VolunteerShiftService = /*#__PURE__*/(() => {\n  class VolunteerShiftService {\n    constructor(httpClient, baseService, languageService) {\n      this.httpClient = httpClient;\n      this.baseService = baseService;\n      this.languageService = languageService;\n      this.baseUrl = `${environment.apiUrl}`;\n      this.sellerAccessDataChangeEmit = new EventEmitter();\n    }\n\n    getShifts() {\n      if (this.isConnectedToBeeple()) {\n        let tmpShift = [];\n        return this.httpClient.get(`${this.baseUrl}sellers/user-shifts/${this.getBeepleVolunteerId()}`).pipe(map(shift => shift.enrolments), map(e => {\n          return this.mapShiftsRemoveOldFromPreviousYear(e);\n        }), map(e => {\n          return this.mapSortShiftsByStartDatetime(e);\n        }), tap(d => {\n          tmpShift = d;\n        }), switchMap(d => {\n          return d.length === 0 ? of([]) : forkJoin(d.map(i => this.getOneShift(i.id)));\n        }), map(d => {\n          if (d.length > 0) {\n            for (let i = 0; i < d.length; i++) {\n              tmpShift[i]['team'] = d[i].team;\n            }\n          }\n\n          return tmpShift;\n        }), tap(s => this.shifts = tmpShift), tap(s => this.setOfflineList(s)));\n      } else {\n        return of([]);\n      }\n    }\n\n    getOneShift(id) {\n      return this.httpClient.get(`${this.baseUrl}sellers/shift/${id}`);\n    }\n\n    login(session) {\n      session.display = 'MyManifiesta';\n      return this.baseService.postCall(`${this.baseUrl}sellers/connect`, session).pipe(tap(data => {\n        localStorage.setItem(LocalStorageEnum.BeepleId, data.id);\n        localStorage.setItem(LocalStorageEnum.BeepleEmail, data.mail); // localStorage.setItem(LocalStorageEnum.BeepleToken, data.token);\n      }));\n    } // no data call method\n\n\n    logout() {\n      this.shifts = [];\n      localStorage.removeItem(LocalStorageEnum.BeepleId);\n      localStorage.removeItem(LocalStorageEnum.BeepleToken);\n    }\n\n    getBeepleVolunteerId() {\n      return localStorage.getItem(LocalStorageEnum.BeepleId);\n    }\n\n    getBeepleVolunteerToken() {\n      return localStorage.getItem(LocalStorageEnum.BeepleToken);\n    }\n\n    getBeepleVolunteerEmail() {\n      return localStorage.getItem(LocalStorageEnum.BeepleEmail);\n    }\n\n    getSellerDepartment() {\n      return localStorage.getItem(LocalStorageEnum.SellerDepartment);\n    }\n\n    getSellerPostalCode() {\n      return localStorage.getItem(LocalStorageEnum.SellerPostalCode);\n    }\n\n    getSellerSellingGoal() {\n      return parseInt(localStorage.getItem(LocalStorageEnum.SellerSellingGoal));\n    }\n\n    sendSellerVerificationEmit() {\n      this.sellerAccessDataChangeEmit.emit('verify');\n    }\n\n    isConnectedToBeeple() {\n      return this.getBeepleVolunteerId() && this.getBeepleVolunteerEmail();\n    } // Need to be connected and want to sell and have a departement selected\n\n\n    isReadyToSellWithData() {\n      return this.getSellerDepartment() && this.getSellerPostalCode() && this.getSellerSellingGoal();\n    }\n\n    mapShiftsRemoveOldFromPreviousYear(shifts) {\n      const yearNow = new Date().getFullYear();\n      return shifts.filter(s => {\n        var _a;\n\n        const yearStart = new Date((_a = s.worked_hours[0]) === null || _a === void 0 ? void 0 : _a.shift.start_datetime).getFullYear();\n        return yearNow === yearStart;\n      });\n    }\n\n    mapSortShiftsByStartDatetime(shifts) {\n      return shifts.sort((a, b) => {\n        var _a, _b;\n\n        const aDate = new Date((_a = a.worked_hours[0]) === null || _a === void 0 ? void 0 : _a.shift.start_datetime).getTime();\n        const bDate = new Date((_b = b.worked_hours[0]) === null || _b === void 0 ? void 0 : _b.shift.start_datetime).getTime();\n        return aDate - bDate;\n      });\n    }\n\n    getLongtextVolunteersBenefits() {\n      return this.httpClient.get(`${this.baseUrl}admins/longtext/volunteers-benefits/${this.languageService.selectedLanguage}`);\n    }\n\n    getLongtextNewInfos() {\n      return this.httpClient.get(`${this.baseUrl}admins/longtext/general-new-infos/${this.languageService.selectedLanguage}`);\n    }\n\n    getLongtextOveralInfos() {\n      return this.httpClient.get(`${this.baseUrl}admins/longtext/over-info/${this.languageService.selectedLanguage}`);\n    }\n\n    getLongtextHome() {\n      return this.httpClient.get(`${this.baseUrl}admins/longtext/home/${this.languageService.selectedLanguage}`);\n    } // offline\n\n\n    setOfflineList(shifts) {\n      localStorage.setItem(LocalStorageEnum.OfflineShifts, JSON.stringify(shifts));\n    }\n\n    getOfflineList() {\n      const tmp = localStorage.getItem(LocalStorageEnum.OfflineShifts);\n\n      if (tmp) {\n        try {\n          return JSON.parse(localStorage.getItem(LocalStorageEnum.OfflineShifts));\n        } catch (e) {\n          return [];\n        }\n      } else {\n        return [];\n      }\n    }\n\n  }\n\n  VolunteerShiftService.ɵfac = function VolunteerShiftService_Factory(t) {\n    return new (t || VolunteerShiftService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BaseService), i0.ɵɵinject(i3.LanguageCommunicationService));\n  };\n\n  VolunteerShiftService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VolunteerShiftService,\n    factory: VolunteerShiftService.ɵfac,\n    providedIn: 'root'\n  });\n  return VolunteerShiftService;\n})();","map":null,"metadata":{},"sourceType":"module"}