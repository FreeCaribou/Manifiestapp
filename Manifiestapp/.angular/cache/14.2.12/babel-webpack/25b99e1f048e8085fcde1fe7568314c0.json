{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpErrorResponse, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { from, Observable } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@ionic/angular\";\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    constructor(translate, toastController) {\n      this.translate = translate;\n      this.toastController = toastController;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        console.error('error with some backend request', error, req);\n        return from(this.handleError(req, next, error));\n      }));\n    }\n    handleError(req, next, error) {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        let message = yield this.translate.get('Error.Generic').toPromise();\n        if ((_a = error.error) === null || _a === void 0 ? void 0 : _a.code) {\n          message = yield this.translate.get(`Error.${error.error.code}`).toPromise();\n        }\n        const toast = yield this.toastController.create({\n          header: 'Internet Error',\n          message,\n          icon: 'bug-outline',\n          color: 'danger',\n          duration: 4000\n        });\n        toast.present();\n        return next.handle(req).toPromise();\n      });\n    }\n  }\n  HttpErrorInterceptor.ɵfac = function HttpErrorInterceptor_Factory(t) {\n    return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.ToastController));\n  };\n  HttpErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptor,\n    factory: HttpErrorInterceptor.ɵfac\n  });\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}