{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let LoadingCommunicationService = /*#__PURE__*/(() => {\n  class LoadingCommunicationService {\n    constructor() {\n      this.isLoading = [];\n      this.loaderChangeEvent = new EventEmitter();\n    }\n    // We can have multiple call of the loader at the same time, but we want the \"false\" to be when the array is empty\n    changeLoaderTo(value) {\n      value ? this.isLoading.push(true) : this.isLoading.pop();\n      this.loaderChangeEvent.emit(value);\n    }\n  }\n  LoadingCommunicationService.ɵfac = function LoadingCommunicationService_Factory(t) {\n    return new (t || LoadingCommunicationService)();\n  };\n  LoadingCommunicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingCommunicationService,\n    factory: LoadingCommunicationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoadingCommunicationService;\n})();","map":null,"metadata":{},"sourceType":"module"}