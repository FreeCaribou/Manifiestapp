{"ast":null,"code":"import _asyncToGenerator from \"C:/Main/Document/Code/Manifiestapp/Manifiestapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\n\nfunction translatedConnection() {\n  const connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n  let result = 'unknown';\n  const type = connection ? connection.type || connection.effectiveType : null;\n\n  if (type && typeof type === 'string') {\n    switch (type) {\n      // possible type values\n      case 'bluetooth':\n      case 'cellular':\n        result = 'cellular';\n        break;\n\n      case 'none':\n        result = 'none';\n        break;\n\n      case 'ethernet':\n      case 'wifi':\n      case 'wimax':\n        result = 'wifi';\n        break;\n\n      case 'other':\n      case 'unknown':\n        result = 'unknown';\n        break;\n      // possible effectiveType values\n\n      case 'slow-2g':\n      case '2g':\n      case '3g':\n        result = 'cellular';\n        break;\n\n      case '4g':\n        result = 'wifi';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return result;\n}\n\nexport class NetworkWeb extends WebPlugin {\n  constructor() {\n    super();\n\n    this.handleOnline = () => {\n      const connectionType = translatedConnection();\n      const status = {\n        connected: true,\n        connectionType: connectionType\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n\n    this.handleOffline = () => {\n      const status = {\n        connected: false,\n        connectionType: 'none'\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', this.handleOnline);\n      window.addEventListener('offline', this.handleOffline);\n    }\n  }\n\n  getStatus() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!window.navigator) {\n        throw _this.unavailable('Browser does not support the Network Information API');\n      }\n\n      const connected = window.navigator.onLine;\n      const connectionType = translatedConnection();\n      const status = {\n        connected,\n        connectionType: connected ? connectionType : 'none'\n      };\n      return status;\n    })();\n  }\n\n}\nconst Network = new NetworkWeb();\nexport { Network }; //# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module"}